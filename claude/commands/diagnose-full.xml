<?xml version="1.0" encoding="UTF-8"?>
<!-- Full 模式示例：完整深度分析，8-12K tokens -->
<!-- 适用场景：复杂问题、性能分析、架构问题 -->
<!-- 包含：符号分析、AST、外部知识、历史上下文 -->
<!-- 坐标系：line/column 使用 1-based，byte_offset 使用 0-based -->
<diagnosis mode="full" timestamp="YYYY-MM-DDTHH:MM:SSZ" tokens="10000" schema_version="1.1">
  <!-- 工具版本信息 -->
  <tool_versions>
    <tool name="mcp-debugger" version="0.15.4" note="运行时断点调试、单步执行、变量检查（优先使用）"/>
    <tool name="ripgrep" version="13.0.0" note="高性能文本搜索，尊重 gitignore"/>
    <tool name="semgrep" version="1.45.0" note="安全漏洞扫描与代码质量检测（beta）"/>
    <tool name="serena" version="0.3.0" mode="mcp" note="基于 LSP 的符号级代码分析，多语言支持"/>
    <tool name="tree-sitter" version="0.20.8" note="精确语法解析与增量分析"/>
    <tool name="repomapper" version="0.2.1" mode="mcp" note="PageRank 算法识别项目关键文件"/>
    <tool name="exa" version="1.0.0" mode="mcp" note="双模式搜索：web_search_exa 和 get_code_context_exa（10 亿+ 代码库）"/>
    <tool name="git" version="2.39.0"/>
  </tool_versions>

  <problem>
    <type>performance</type>
    <description>API response time degradation under load</description>
    <symptoms>
      <symptom>Response time increased from 200ms to 2000ms</symptom>
      <symptom>Database connection pool exhaustion</symptom>
      <symptom>Memory usage spike during peak hours</symptom>
    </symptoms>
    <impact>
      <users_affected>5000+</users_affected>
      <revenue_impact>$10,000/hour</revenue_impact>
    </impact>
  </problem>

  <comprehensive_analysis>
    <!-- serena: LSP 符号级分析（多语言支持：Python/JS/Java 等）-->
    <symbol_analysis>
      <symbol name="getUser" type="function" file="src/user.service.ts">
        <definition start_line="140" end_line="145" start_column="1" end_column="2"/>
        <references count="23">
          <reference file="src/api/routes.ts" line="45" column="35" context="router.get('/user/:id', getUser)"/>
          <reference file="src/order.service.ts" line="89" column="28" context="const user = await getUser(order.userId)"/>
          <reference file="src/notification.service.ts" line="34" column="31" context="const recipient = await getUser(notification.userId)"/>
        </references>
        <complexity cyclomatic="5" cognitive="8"/>
      </symbol>

      <symbol name="findOne" type="method" file="src/db/connection.js">
        <definition start_line="45" end_line="67" start_column="1" end_column="2"/>
        <references count="45">
          <reference file="src/user.service.ts" line="141" column="28"/>
          <reference file="src/order.service.ts" line="23" column="32"/>
        </references>
      </symbol>

      <call_chain>
        <![CDATA[
        main()
          -> startServer()
            -> setupRoutes()
              -> router.get('/user/:id')
                -> getUser(userId)
                  -> db.findOne({ id: userId })
                    -> mongoose.connection.collection.findOne()
        ]]>
      </call_chain>

      <data_flow>
        <variable name="userId" source="request.params.id" sink="db.findOne">
          <transformation>String -> ObjectId conversion</transformation>
          <tainted>Potential injection if not properly sanitized</tainted>
        </variable>
        <variable name="user" source="db.findOne" sink="response.json">
          <null_possibility>true</null_possibility>
          <access_without_check line="142"/>
        </variable>
      </data_flow>
    </symbol_analysis>

    <!-- tree-sitter: 精确语法解析与增量分析 -->
    <ast_analysis>
      <structure file="src/user.service.ts">
        <node type="function_declaration" name="getUser" start_line="140" end_line="145" start_byte="10240" end_byte="10512">
          <node type="parameter" name="userId" line="140" column="23"/>
          <node type="await_expression" line="141" column="16" byte_offset="10285">
            <node type="call_expression" name="db.findOne" line="141" column="22">
              <argument type="object" line="141" column="33"/>
            </node>
          </node>
          <node type="return_statement" line="142" column="3" byte_offset="10340">
            <node type="member_expression" line="142" column="10">
              <object>user</object>
              <property>id</property>
              <issue>Accessing property of potentially null object</issue>
            </node>
          </node>
        </node>
      </structure>

      <complexity_metrics>
        <file path="src/user.service.ts">
          <max_depth>4</max_depth>
          <total_nodes>156</total_nodes>
          <cyclomatic_complexity>12</cyclomatic_complexity>
          <halstead_difficulty>18.5</halstead_difficulty>
          <maintainability_index>65.3</maintainability_index>
        </file>
      </complexity_metrics>
    </ast_analysis>

    <!-- exa: 外部知识和最佳实践（get_code_context_exa: 10 亿+ GitHub/文档/Stack Overflow）-->
    <external_knowledge>
      <documentation source="mongoose" url="https://mongoosejs.com/docs/api.html#model_Model.findOne">
        <![CDATA[
        Model.findOne() returns null if no document matches the query.
        Always check for null before accessing document properties.

        Example:
        const user = await User.findOne({ id: userId });
        if (!user) {
          return res.status(404).json({ error: 'User not found' });
        }
        return res.json(user);
        ]]>
      </documentation>

      <stackoverflow>
        <solution url="https://stackoverflow.com/q/14641968" votes="234">
          <![CDATA[
          Use optional chaining for safe property access:
          return user?.id || null;

          Or use explicit null check:
          if (!user) throw new NotFoundError('User not found');
          ]]>
        </solution>
      </stackoverflow>

      <best_practice source="Node.js Best Practices">
        <![CDATA[
        1. Implement repository pattern with proper error handling
        2. Use TypeScript with strict null checks
        3. Add integration tests for edge cases
        4. Use custom error classes for different scenarios
        5. Implement circuit breaker for database operations
        ]]>
      </best_practice>
    </external_knowledge>

    <!-- repomapper: 深度项目分析（PageRank 算法识别关键依赖）-->
    <dependency_graph>
      <critical_path>
        <file path="src/index.ts" rank="15.234"/>
        <file path="src/api/routes.ts" rank="12.856"/>
        <file path="src/user.service.ts" rank="10.8111"/>
        <file path="src/db/connection.js" rank="8.245"/>
        <file path="src/models/user.model.js" rank="6.512"/>
      </critical_path>

      <coupled_files threshold="0.8">
        <pair file1="user.service.ts" file2="order.service.ts" coupling="0.92"/>
        <pair file1="user.service.ts" file2="auth.service.ts" coupling="0.87"/>
        <pair file1="db/connection.js" file2="user.service.ts" coupling="0.85"/>
      </coupled_files>

      <circular_dependencies>
        <cycle>user.service -> order.service -> user.service</cycle>
      </circular_dependencies>
    </dependency_graph>
  </comprehensive_analysis>

  <!-- mcp-debugger: 运行时断点调试、单步执行、变量检查（优先使用）-->
  <runtime_debugging>
    <session id="a4d1acc8-84a8" state="paused" reason="breakpoint" language="python">
      <breakpoints>
        <breakpoint id="28e06119-619e" file="src/user.service.ts" line="141" verified="true" hitCount="1"/>
        <breakpoint id="7f3c8a21-34bc" file="src/user.service.ts" line="142" verified="true" hitCount="0"/>
      </breakpoints>
      <stack_trace>
        <frame id="3" name="getUser" file="src/user.service.ts" line="141" column="28"/>
        <frame id="2" name="handler" file="src/api/routes.ts" line="45" column="20"/>
        <frame id="1" name="express.middleware" file="node_modules/express/lib/router.js" line="635"/>
        <frame id="0" name="main" file="src/index.ts" line="12"/>
      </stack_trace>
      <scopes frame="3">
        <scope name="Locals" variablesReference="5" expensive="false"/>
        <scope name="Globals" variablesReference="6" expensive="false"/>
      </scopes>
      <variables scope="Locals" reference="5">
        <variable name="userId" value="abc123" type="string" variablesReference="0" expandable="false"/>
        <variable name="user" value="null" type="object" variablesReference="0" expandable="false" issue="Query returned null"/>
        <variable name="db" value="{connection: MongoClient}" type="object" variablesReference="7" expandable="true"/>
      </variables>
      <step_execution>
        <action>step_over</action>
        <next_line>142</next_line>
        <expected_issue>Attempting to access property 'id' of null object</expected_issue>
      </step_execution>
    </session>
  </runtime_debugging>

  <!-- 备选：主动添加的 Debug 日志（当无法使用 mcp-debugger 时）-->
  <!-- Full 模式保留完整示例，原则：输出公式所有变量 + 标注数据源 + 结构化对象 -->
  <!--
  <debug_logs>
    <log level="debug" timestamp="YYYY-MM-DDTHH:MM:SSZ" context="getUser:141">
      <![CDATA[
      [DEBUG] Database query: {
        operation: "findOne",
        collection: "users",
        query: { id: "abc123" },
        result: null,
        expected: "object",
        context: { requestId: "req-xyz", timestamp: "2025-01-05T10:30:00Z" }
      }

      [DEBUG] Variable state before line 142: {
        userId: "abc123",
        user: null,
        willCrash: true,
        reason: "Accessing property 'id' of null"
      }
      ]]>
    </log>
    <finding>Structured logging reveals null value from database query</finding>
    <root_cause_identified>true</root_cause_identified>
  </debug_logs>
  -->

  <!-- git: 深度历史分析与演变 -->
  <git_context>
    <evolution>
      <file path="src/user.service.ts">
        <changes last_30_days="15" contributors="3"/>
        <hotspot lines="140-145">Changed 8 times in last month</hotspot>
        <blame>
          <line number="141" author="john@example.com" date="YYYY-MM-DD" commit="abc123"/>
          <line number="142" author="jane@example.com" date="YYYY-MM-DD" commit="def456"/>
        </blame>
        <refactoring_history>
          <change date="YYYY-MM-DD" type="extract_method" description="Extracted validation logic"/>
          <change date="YYYY-MM-DD" type="rename" description="Renamed from getUserById"/>
        </refactoring_history>
      </file>
    </evolution>

    <related_issues>
      <issue id="GH-123" status="closed" date="YYYY-MM-DD">
        <title>Similar null pointer in order service</title>
        <resolution>Added null checks throughout service layer</resolution>
      </issue>
      <issue id="GH-456" status="open" date="YYYY-MM-DD">
        <title>Implement global error handler</title>
      </issue>
    </related_issues>

    <performance_trends>
      <metric name="response_time_p95">
        <baseline>200ms</baseline>
        <current>2000ms</current>
        <degradation_start>YYYY-MM-DDTHH:MM:SSZ</degradation_start>
      </metric>
    </performance_trends>
  </git_context>

  <root_cause_analysis>
    <primary>Missing defensive programming practices in data access layer</primary>
    <contributing>
      <factor severity="high">No TypeScript strict null checks enabled</factor>
      <factor severity="medium">Inadequate error handling strategy</factor>
      <factor severity="medium">Missing integration tests for edge cases</factor>
      <factor severity="low">Outdated mongoose version with known issues</factor>
    </contributing>
    <timeline>
      <event date="YYYY-MM-DD">Code change introduced bug</event>
      <event date="YYYY-MM-DD">First user reports</event>
      <event date="YYYY-MM-DD">Issue escalated</event>
    </timeline>
  </root_cause_analysis>

  <comprehensive_fix_plan>
    <immediate>
      <action priority="1" effort="15min">
        <description>Add null check with proper error response</description>
        <code>
          <![CDATA[
          if (!user) {
            return res.status(404).json({
              error: 'User not found',
              userId: userId
            });
          }
          ]]>
        </code>
      </action>
      <action priority="2" effort="30min">Deploy hotfix to production</action>
    </immediate>

    <short_term>
      <action priority="3" effort="2h">Enable TypeScript strict mode</action>
      <action priority="4" effort="4h">Add comprehensive test coverage</action>
      <action priority="5" effort="1d">Implement repository pattern</action>
    </short_term>

    <long_term>
      <action priority="6" effort="1w">Refactor entire data access layer</action>
      <action priority="7" effort="3d">Add monitoring and alerting</action>
      <action priority="8" effort="2w">Implement event sourcing for audit trail</action>
    </long_term>
  </comprehensive_fix_plan>

  <test_strategy>
    <unit_tests>
      <test name="should_handle_null_user_gracefully" priority="high"/>
      <test name="should_return_404_when_user_not_found" priority="high"/>
      <test name="should_validate_userId_format" priority="medium"/>
    </unit_tests>

    <integration_tests>
      <test name="API_returns_proper_error_for_nonexistent_user" priority="high"/>
      <test name="Database_connection_failure_handling" priority="medium"/>
    </integration_tests>

    <performance_tests>
      <test name="Load_test_with_1000_concurrent_requests"/>
      <test name="Memory_leak_detection_under_load"/>
    </performance_tests>

    <coverage current="45%" target="80%" critical_paths="65%"/>
  </test_strategy>

  <lesson>
    <problem>API response time degradation under load</problem>
    <root_cause>Database connection pool exhaustion and missing backpressure</root_cause>
    <fix>Tune pool size; implement backpressure/circuit breaker; add caching on hot paths</fix>
    <scope>High-concurrency endpoints and the data access layer</scope>
    <anti_patterns>Unbounded concurrency; await-in-loop; blocking I/O on hot paths</anti_patterns>
  </lesson>

  <monitoring_recommendations>
    <metrics>
      <metric name="null_pointer_errors" threshold="&lt;1%" alert="true"/>
      <metric name="api_response_time_p95" threshold="&lt;500ms" alert="true"/>
      <metric name="database_connection_pool_usage" threshold="&lt;80%" alert="true"/>
    </metrics>

    <alerts>
      <alert condition="error_rate > 0.1%" channel="pagerduty"/>
      <alert condition="response_time_p95 > 1000ms" channel="slack"/>
    </alerts>

    <dashboards>
      <dashboard name="User Service Health" url="https://monitoring.example.com/dash/user-service"/>
    </dashboards>
  </monitoring_recommendations>
</diagnosis>